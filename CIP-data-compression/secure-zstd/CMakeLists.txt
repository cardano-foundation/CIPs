cmake_minimum_required(VERSION 3.28)
project(SECZSTD C C)
set(CMAKE_C_STANDARD 99)

if(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
    message(FATAL_ERROR "In-source builds are not allowed")
endif()
if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release
       CACHE STRING "Choose the type of build: Release, Debug or Fuzz."
       FORCE)
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Fuzz")
    if(CMAKE_C_COMPILER_ID STREQUAL "Clang")
        set(SANITIZER "fuzzer,address")
        add_compile_options(-g)
        add_compile_options(-O3)
        add_compile_options("-fsanitize=${SANITIZER}")
        add_link_options("-fsanitize=${SANITIZER}")
        add_link_options("-static-libsan")
    else()
        message(FATAL_ERROR "Fuzzer builds are only supported with Clang")
    endif()
endif()

add_compile_options(-W -Wall -Wextra -Wpedantic)
add_subdirectory(lib)
add_executable(caller test/caller.c)
target_link_libraries(caller PRIVATE seczstd)
add_executable(worker test/worker.c)
target_link_libraries(worker PRIVATE seczstd)
add_custom_target(test ALL DEPENDS worker caller)

if (CMAKE_BUILD_TYPE STREQUAL "Fuzz")
    add_executable(fuzzer test/fuzzer.c)
    target_link_libraries(fuzzer PRIVATE seczstd)
    add_custom_target(fuzz ALL DEPENDS fuzzer)
endif()
