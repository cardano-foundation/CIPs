; This file was auto-generated from huddle. Please do not modify it directly!

; entry in scls file
generic_record<a0,b0> = {key : a0, value : b0}

; entry in utxo namespace
record_entry = generic_record<tx_in,tx_out>


tx_in = [hash32, uint .size 2]

hash32 = bytes .size 32

tx_out = [0, shelley_tx_out// 1, babbage_tx_out]

shelley_tx_out = [address, amount : value, ? datum_hash : hash32]

address = bytes

value = coin/ [coin, multiasset<positive_coin>]

coin = uint

multiasset<a0> = {* policy_id => {+ asset_name => a0}}

policy_id = hash28

hash28 = bytes .size 28

asset_name = bytes .size (0 .. 32)

positive_coin = 1 .. 18446744073709551615

; NEW starting with babbage
;   datum_option
;   script_ref
babbage_tx_out = {0 : address, 1 : value, ? 2 : datum_option, ? 3 : script_ref}

datum_option = [0, hash32// 1, data]

data = #6.24(bytes .cbor plutus_data)

plutus_data =
  constr<plutus_data
  >
  / {* plutus_data => plutus_data}
  / [* plutus_data]
  / big_int
  / bounded_bytes

constr<a0
> =
  #6.121([* a0])
  / #6.122([* a0])
  / #6.123([* a0])
  / #6.124([* a0])
  / #6.125([* a0])
  / #6.126([* a0])
  / #6.127([* a0])
  / #6.102([uint, [* a0]])

big_int = int/ big_uint/ big_nint

big_uint = #6.2(bounded_bytes)

; The real bounded_bytes does not have this limit. it instead has
; a different limit which cannot be expressed in CDDL.
;
; The limit is as follows:
;  - bytes with a definite-length encoding are limited to size 0..64
;  - for bytes with an indefinite-length CBOR encoding, each chunk is
;    limited to size 0..64
;  ( reminder: in CBOR, the indefinite-length encoding of
;  bytestrings consists of a token #2.31 followed by a sequence
;  of definite-length encoded bytestrings and a stop code )
bounded_bytes = bytes .size (0 .. 64)

big_nint = #6.3(bounded_bytes)

script_ref = #6.24(bytes .cbor script)

script =
  [  0, native_script
  // 1
  , bytes
  // 2
  , bytes
  // 3
  , bytes
  ]


native_script =
  [  script_pubkey
  // script_all
  // script_any
  // script_n_of_k
  // invalid_before
  // invalid_hereafter
  ]


script_pubkey = (0, hash28)

script_all = (1, [* native_script])

script_any = (2, [* native_script])

script_n_of_k = (3, n : int64, [* native_script])

int64 = -9223372036854775808 .. 9223372036854775807

invalid_before = (4, slot_no)

slot_no = uint .size 8

invalid_hereafter = (5, slot_no)

