coin = uint

stake_credential = credential
credential = [0, addr_keyhash// 1, script_hash]

; ============================================================================
; protocol key and values

utxo_key = (id : transaction_id, index : uint .size 2)

utxo_value = (
    address: bytes,
    amount: coin
)

; ============================================================================
; stakes

stake_delegation = (2, stake_credential, pool_keyhash)

stake_credential = credential

credential_key = addr_keyhash // 1, script_hash

pool_key = pool_keyhash
pool_params =
  ( operator       : pool_keyhash
  , vrf_keyhash    : vrf_keyhash
  , pledge         : coin
  , cost           : coin
  , margin         : unit_interval
  , reward_account : reward_account
  , pool_owners    : set<addr_keyhash>
  , relays         : [* relay]
  , pool_metadata  : pool_metadata/ nil
  )

stake_delegation_value =
  ( credential_key
  , pool_key
  )

; ============================================================================
; protocol key and values

drep = [0, addr_keyhash// 1, script_hash// 2// 3]

vote = (credential_key, drep)


; ============================================================================
; protocol key and values

protocol_key = "protocol"

protocol_value =
  { ? 0  : coin                   ; minfeeA
  , ? 1  : coin                   ; minfeeB
  , ? 2  : uint .size 4           ; max block body size
  , ? 3  : uint .size 4           ; max transaction size
  , ? 4  : uint .size 2           ; max block header size
  , ? 5  : coin                   ; key deposit
  , ? 6  : coin                   ; pool deposit
  , ? 7  : epoch_interval         ; maximum epoch
  , ? 8  : uint .size 2           ; n_opt: desired number of stake pools
  , ? 9  : nonnegative_interval   ; pool pledge influence
  , ? 10 : unit_interval          ; expansion rate
  , ? 11 : unit_interval          ; treasury growth rate
  , ? 16 : coin                   ; min pool cost
  , ? 17 : coin                   ; ada per utxo byte
  , ? 18 : cost_models            ; cost models for script languages
  , ? 19 : ex_unit_prices         ; execution costs
  , ? 20 : ex_units               ; max tx ex units
  , ? 21 : ex_units               ; max block ex units
  , ? 22 : uint .size 4           ; max value size
  , ? 23 : uint .size 2           ; collateral percentage
  , ? 24 : uint .size 2           ; max collateral inputs
  , ? 25 : pool_voting_thresholds ; pool voting thresholds
  , ? 26 : drep_voting_thresholds ; drep voting thresholds
  , ? 27 : uint .size 2           ; min committee size
  , ? 28 : epoch_interval         ; committee term limit
  , ? 29 : epoch_interval         ; goveranance action validity period
  , ? 30 : coin                   ; governance action deposit
  , ? 31 : coin                   ; drep deposit
  , ? 32 : epoch_interval         ; drep inactivity period
  , ? 33 : nonnegative_interval   ; minfee refscriptcoinsperbyte
  }

; ============================================================================
; constants and types

hash28 = bytes .size 28
pool_keyhash = hash28
addr_keyhash = hash28
script_hash = hash28
vrf_keyhash = hash32

stake_credential = credential

credential = [0, addr_keyhash// 1, script_hash]

drep = [0, addr_keyhash// 1, script_hash// 2// 3]
stake_vote_deleg_cert = (10, stake_credential, pool_keyhash, drep)
stake_reg_deleg_cert = (11, stake_credential, pool_keyhash, coin)


; ============================================================================
; WIP
certificate =
  // stake_vote_deleg_cert
  // stake_reg_deleg_cert
  // vote_reg_deleg_cert
  // stake_vote_reg_deleg_cert
  // auth_committee_hot_cert
  // resign_committee_cold_cert
  // reg_drep_cert
  // unreg_drep_cert
  // update_drep_cert
